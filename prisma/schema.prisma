// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//========================USER CENTRIC MODELS========================

enum UserType {
  ADMIN
  ORDER_PROCESSOR
  CUSTOMER
  EMPLOYEE
  FINANCE_MANAGER
  STOCK_MANAGER
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  email           String            @unique
  name            String
  password        String
  userType        UserType          @default(CUSTOMER)
  phone           String?
  privilegeId     String?           @db.ObjectId
  aadharNumber    Int?
  pan             String?
  gstNumber       String?
  address         String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  privilege       UserPrivilege?    @relation(fields: [privilegeId], references: [id])
  StockRecord     StockRecord[]
  Order           Order[]
  DeliveryAddress DeliveryAddress[]
  OrderItem       OrderItem[]
  Product         Product[]
}

model UserPrivilege {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User[]
}

//========================PRODUCT CENTRIC MODELS========================

model Product {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  mrp                Int
  productCode        String               @unique
  lowStockLimit      Int                  @default(0)
  overStockLimit     Int                  @default(0)
  categoryId         String               @db.ObjectId
  subCategoryId      String               @db.ObjectId
  creatorId          String               @db.ObjectId
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  description        String?
  grammage           Int?
  imageUrl           String?
  SubCategory        SubCategory          @relation(fields: [subCategoryId], references: [id])
  Category           Category             @relation(fields: [categoryId], references: [id])
  OrderItem          OrderItem[]
  StockRecord        StockRecord[]
  Stock              Stock[]
  ProductTagRelation ProductTagRelation[]
  User               User                 @relation(fields: [creatorId], references: [id])
}

model ProductTag {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ProductTagRelation ProductTagRelation[]
}

model ProductTagRelation {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  productId    String     @db.ObjectId
  productTagId String     @db.ObjectId
  Product      Product    @relation(fields: [productId], references: [id])
  ProductTag   ProductTag @relation(fields: [productTagId], references: [id])
}

model ColorCode {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  lowStockAlertColor    String   @default("#008000") // green
  lowStockAlertMessage  String   @default("Low Stock")
  overStockAlertColor   String   @default("#FF0000") // red
  overStockAlertMessage String   @default("Over Stock")
  inStockAlertColor     String   @default("#00008B") // blue
  inStockAlertMessage   String   @default("In Stock")
  expiryAlertColor      String   @default("#FF0000") // red
  expiryAlertMessage    String   @default("Expired")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  SubCategory SubCategory[]
  Product     Product[]
}

model SubCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  String    @db.ObjectId
  Category    Category  @relation(fields: [categoryId], references: [id])
  Product     Product[]
}

model Stock {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  stockId           String        @unique //this id will be provided by the admin
  productId         String        @db.ObjectId
  manufacturingDate DateTime
  arrivalDate       DateTime
  validityMonths    Int           @default(10)
  expiryDate        DateTime
  supplierName      String?
  supplierId        String?       @db.ObjectId
  stockQuantity     Int           @default(0)
  isArchived        Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  product           Product       @relation(fields: [productId], references: [id])
  StockRecord       StockRecord[]
}

enum StockRecordEntryReason {
  ARRIVAL_FROM_SUPPLIER
  DELIVERED_TO_CUSTOMER
  CORRECTION_BY_ADMIN
}

model StockRecord {
  id            String                 @id @default(auto()) @map("_id") @db.ObjectId
  productId     String                 @db.ObjectId
  changeInStock Int                    @default(0)
  createdBy     String                 @db.ObjectId
  createdAt     DateTime               @default(now())
  stockId       String
  reason        StockRecordEntryReason
  Product       Product                @relation(fields: [productId], references: [id])
  Stock         Stock                  @relation(fields: [stockId], references: [stockId])
  User          User                   @relation(fields: [createdBy], references: [id])
  Order         Order[]
}

//========================ORDER CENTRIC MODELS========================

model Order {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  customeOrderId    String           @unique @default(uuid())
  status            OrderStatus      @default(PENDING)
  totalPrice        Int?             @default(0)
  orderDate         DateTime         @default(now())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  customerId        String           @db.ObjectId
  customer          User             @relation(fields: [customerId], references: [id])
  vehicleId         String?          @db.ObjectId
  vehicle           Vehicle?         @relation(fields: [vehicleId], references: [id])
  deliveryAddressId String?          @db.ObjectId
  deliveryAddress   DeliveryAddress? @relation(fields: [deliveryAddressId], references: [id])
  OrderItem         OrderItem[]
  originalOrderId   String?          @db.ObjectId
  stockRecordId     String?          @db.ObjectId
  stockRecord       StockRecord?     @relation(fields: [stockRecordId], references: [id])
}

enum OrderStatus {
  PENDING
  MODIFYING
  PACKING
  SHIPPING
  DELIVERED
  COMPLETED
}

model OrderItem {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId        String    @db.ObjectId
  productId      String    @db.ObjectId
  quantity       Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deliveryDate   DateTime?
  orderCompleted Boolean   @default(false)
  Order          Order     @relation(fields: [orderId], references: [id])
  Product        Product   @relation(fields: [productId], references: [id])
  customerId     String    @db.ObjectId
  Customer       User      @relation(fields: [customerId], references: [id])
}

model DeliveryAddress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  default   Boolean  @default(false)
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Order     Order[]
}

model OriginalOrder {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  originalOrderId   String              @db.ObjectId
  orderDate         DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  OriginalOrderItem OriginalOrderItem[]
}

model OriginalOrderItem {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  originalOrderId String        @db.ObjectId
  productId       String        @db.ObjectId
  quantity        Int
  OriginalOrder   OriginalOrder @relation(fields: [originalOrderId], references: [id])
}

//========================VEHICLE CENTRIC MODELS========================

model Vehicle {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  vehicleName   String
  vehicleNumber String      @unique
  vehicleType   VehicleType
  capacity      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Order         Order[]
}

enum VehicleType {
  TRUCK
  PICKUP
  OTHER
}
