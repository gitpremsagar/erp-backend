// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  ORDER_PROCESSOR
  CUSTOMER
  EMPLOYEE
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  email           String            @unique
  phone           String
  name            String
  password        String
  privilegeId     String            @db.ObjectId
  aadharNumber    Int?
  pan             String?
  gstNumber       String?
  address         String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  privilege       UserPrivilege     @relation(fields: [privilegeId], references: [id])
  StockEntry      StockEntry[]
  Order           Order[]
  DeliveryAddress DeliveryAddress[]
}

// model Customer {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   name         String
//   aadharNumber Int
//   email        String
//   phone        String
//   address      String
//   pan          String
//   gstNumber    String
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   Order        Order[]
// }

model UserPrivilege {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User[]
}

model Product {
  id                    String       @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  mrp                   Int
  productCode           String       @unique
  description           String
  expiryDate            DateTime
  validity              String
  stock                 Int          @default(0)
  stockEntryDate        DateTime
  lowStockLimit         Int          @default(0)
  overStockLimit        Int          @default(0)
  grammage              Int
  lowStockAlertColor    String       @default("#008000") // green
  lowStockAlertMessage  String       @default("Low Stock")
  overStockAlertColor   String       @default("#FF0000") // red
  overStockAlertMessage String       @default("Over Stock")
  inStockAlertColor     String       @default("#00008B") // blue
  inStockAlertMessage   String       @default("In Stock")
  expiryAlertDays       Int          @default(0)
  expiryAlertColor      String       @default("#FF0000") // red
  expiryAlertMessage    String       @default("Expired")
  tags                  String[]
  imageUrl              String
  categoryId            String       @db.ObjectId
  groupId               String       @db.ObjectId
  subCategoryId         String       @db.ObjectId
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  Group                 Group        @relation(fields: [groupId], references: [id])
  SubCategory           SubCategory  @relation(fields: [subCategoryId], references: [id])
  Category              Category     @relation(fields: [categoryId], references: [id])
  OrderItem             OrderItem[]
  StockEntry            StockEntry[]
}

model StockEntry {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  productId     String   @db.ObjectId
  changeInStock Int
  createdAt     DateTime @default(now())
  updatedBy     String   @db.ObjectId
  updatedAt     DateTime @updatedAt
  Product       Product  @relation(fields: [productId], references: [id])
  User          User     @relation(fields: [updatedBy], references: [id])
}

model Group {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]
}

model Category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  SubCategory SubCategory[]
  Product     Product[]
}

model SubCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  String    @db.ObjectId
  Category    Category  @relation(fields: [categoryId], references: [id])
  Product     Product[]
}

model Order {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String           @unique @default(uuid())
  status            OrderStatus      @default(PENDING)
  totalPrice        Int              @default(0)
  orderDate         DateTime         @default(now())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  customerId        String           @db.ObjectId
  customer          User             @relation(fields: [customerId], references: [id])
  deliveryAddressId String?          @db.ObjectId
  deliveryAddress   DeliveryAddress? @relation(fields: [deliveryAddressId], references: [id])
  OrderItem         OrderItem[]
}

model OriginalOrder {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  orginalOrderId    String              @db.ObjectId
  orderDate         DateTime
  createdAt         DateTime
  OriginalOrderItem OriginalOrderItem[]
}

model OriginalOrderItem {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  orginalOrderId String        @db.ObjectId
  productId      String        @db.ObjectId
  quantity       Int
  OriginalOrder  OriginalOrder @relation(fields: [orginalOrderId], references: [id])
}

enum OrderStatus {
  PENDING
  MODIFYING
  PACKING
  SHIPPING
  DELIVERED
  COMPLETED
}

model OrderItem {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId        String   @db.ObjectId
  productId      String   @db.ObjectId
  quantity       Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deliveryDate   DateTime
  orderCompleted Boolean  @default(false) 
  Order          Order    @relation(fields: [orderId], references: [id])
  Product        Product  @relation(fields: [productId], references: [id])
}

model DeliveryAddress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  default   Boolean  @default(false)
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Order     Order[]
}

model Vehicle {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  vehicleName   String
  vehicleNumber String      @unique
  vehicleType   VehicleType
  capacity      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum VehicleType {
  TRUCK
  PICKUP
  OTHER
}
